C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE STC_UART
OBJECT MODULE PLACED IN ..\OBJ\stc_uart.obj
COMPILER INVOKED BY: D:\usr\bin\Keil_v5\C51\BIN\C51.EXE ..\FWLib\source\stc_uart.c LARGE OPTIMIZE(9,SIZE) BROWSE INCDIR(
                    -..\FWLib\include;..\SYSTEM\init;..\SYSTEM\delay;..\SYSTEM\uart;..\USER;..\HARDWARE\led;..\HARDWARE\18b20;..\HARDWARE\max
                    -31856) DEBUG OBJECTEXTEND PRINT(..\OBJ\stc_uart.lst) OBJECT(..\OBJ\stc_uart.obj)

line level    source

   1          #include "stc_uart.h"
   2          
   3          
   4          #ifdef UART1
   5          COMx_Define     COM1;
   6          u8      xdata TX1_Buffer[COM_TX1_Lenth];        //发送缓冲
   7          u8      xdata RX1_Buffer[COM_RX1_Lenth];        //接收缓冲
   8          #endif
   9          #ifdef UART2
  10          COMx_Define     COM2;
  11          u8      xdata TX2_Buffer[COM_TX2_Lenth];        //发送缓冲
  12          u8      xdata RX2_Buffer[COM_RX2_Lenth];        //接收缓冲
  13          #endif
  14          #ifdef UART3
              COMx_Define     COM3;
              u8      xdata TX3_Buffer[COM_TX3_Lenth];        //发送缓冲
              u8      xdata RX3_Buffer[COM_RX3_Lenth];        //接收缓冲
              #endif
  19          #ifdef UART4
              COMx_Define     COM4;
              u8      xdata TX4_Buffer[COM_TX4_Lenth];        //发送缓冲
              u8      xdata RX4_Buffer[COM_RX4_Lenth];        //接收缓冲
              #endif
  24          
  25          u8 UART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  26          {
  27   1              u8      i;
  28   1              u32     j;
  29   1              
  30   1      #ifdef UART1
  31   1              if(UARTx == UART1)
  32   1              {
  33   2                      COM1.id = 1;
  34   2                      COM1.TX_read    = 0;
  35   2                      COM1.TX_write   = 0;
  36   2                      COM1.B_TX_busy  = 0;
  37   2                      COM1.RX_Cnt     = 0;
  38   2                      COM1.RX_TimeOut = 0;
  39   2                      COM1.B_RX_OK    = 0;
  40   2                      for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  41   2                      for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  42   2      
  43   2                      if(COMx->UART_Priority > Priority_3)    return 2;       //错误
  44   2                      UART1_Priority(COMx->UART_Priority);    //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_
             -3
  45   2                      if(COMx->UART_Mode > UART_9bit_BRTx)    return 2;       //模式错误
  46   2                      SCON = (SCON & 0x3f) | COMx->UART_Mode;
  47   2                      if((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx))  //可变波特率
  48   2                      {
  49   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
  50   3                              if(j >= 65536UL)        return 2;       //错误
  51   3                              j = 65536UL - j;
  52   3                              if(COMx->UART_BRT_Use == BRT_Timer1)
C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 2   

  53   3                              {
  54   4                                      TR1 = 0;
  55   4                                      AUXR &= ~0x01;          //S1 BRT Use Timer1;
  56   4                                      TMOD &= ~(1<<6);        //Timer1 set As Timer
  57   4                                      TMOD &= ~0x30;          //Timer1_16bitAutoReload;
  58   4                                      AUXR |=  (1<<6);        //Timer1 set as 1T mode
  59   4                                      TH1 = (u8)(j>>8);
  60   4                                      TL1 = (u8)j;
  61   4                                      ET1 = 0;        //禁止中断
  62   4                                      TMOD &= ~0x40;  //定时
  63   4                                      INT_CLKO &= ~0x02;      //不输出时钟
  64   4                                      TR1  = 1;
  65   4                              }
  66   3                              else if(COMx->UART_BRT_Use == BRT_Timer2)
  67   3                              {
  68   4                                      AUXR &= ~(1<<4);        //Timer stop
  69   4                                      AUXR |= 0x01;           //S1 BRT Use Timer2;
  70   4                                      AUXR &= ~(1<<3);        //Timer2 set As Timer
  71   4                                      AUXR |=  (1<<2);        //Timer2 set as 1T mode
  72   4                                      TH2 = (u8)(j>>8);
  73   4                                      TL2 = (u8)j;
  74   4                                      IE2  &= ~(1<<2);        //禁止中断
  75   4                                      AUXR |=  (1<<4);        //Timer run enable
  76   4                              }
  77   3                              else return 2;  //错误
  78   3                      }
  79   2                      else if(COMx->UART_Mode == UART_ShiftRight)
  80   2                      {
  81   3                              if(COMx->BaudRateDouble == ENABLE)      AUXR |=  (1<<5);        //固定波特率SysClk/2
  82   3                              else                                                            AUXR &= ~(1<<5);        //固定波特率SysClk/12
  83   3                      }
  84   2                      else if(COMx->UART_Mode == UART_9bit)   //固定波特率SysClk*2^SMOD/64
  85   2                      {
  86   3                              if(COMx->BaudRateDouble == ENABLE)      PCON |=  (1<<7);        //固定波特率SysClk/32
  87   3                              else                                                            PCON &= ~(1<<7);        //固定波特率SysClk/64
  88   3                      }
  89   2                      if(COMx->UART_Interrupt == ENABLE)      ES = 1; //允许中断
  90   2                      else                                                            ES = 0; //禁止中断
  91   2                      if(COMx->UART_RxEnable == ENABLE)       REN = 1;        //允许接收
  92   2                      else                                                            REN = 0;        //禁止接收
  93   2                      P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);      //切换IO
  94   2                      return  0;
  95   2              }
  96   1      #endif
  97   1      #ifdef UART2
  98   1              if(UARTx == UART2)
  99   1              {
 100   2                      COM2.id = 2;
 101   2                      COM2.TX_read    = 0;
 102   2                      COM2.TX_write   = 0;
 103   2                      COM2.B_TX_busy  = 0;
 104   2                      COM2.RX_Cnt     = 0;
 105   2                      COM2.RX_TimeOut = 0;
 106   2                      COM2.B_RX_OK    = 0;
 107   2                      for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 108   2                      for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 109   2      
 110   2                      if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))   //可变波特率
 111   2                      {
 112   3                              if(COMx->UART_Priority > Priority_3)    return 2;       //错误
 113   3                              UART2_Priority(COMx->UART_Priority);    //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority
             -_3
C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 3   

 114   3                              if(COMx->UART_Mode == UART_9bit_BRTx)   S2CON |=  (1<<7);       //9bit
 115   3                              else                                                                    S2CON &= ~(1<<7);       //8bit
 116   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
 117   3                              if(j >= 65536UL)        return 2;       //错误
 118   3                              j = 65536UL - j;
 119   3                              AUXR &= ~(1<<4);        //Timer stop
 120   3                              AUXR &= ~(1<<3);        //Timer2 set As Timer
 121   3                              AUXR |=  (1<<2);        //Timer2 set as 1T mode
 122   3                              TH2 = (u8)(j>>8);
 123   3                              TL2 = (u8)j;
 124   3                              IE2  &= ~(1<<2);        //禁止中断
 125   3                              AUXR |=  (1<<4);        //Timer run enable
 126   3                      }
 127   2                      else    return 2;       //模式错误
 128   2                      if(COMx->UART_Interrupt == ENABLE)      IE2   |=  1;            //允许中断
 129   2                      else                                                            IE2   &= ~1;            //禁止中断
 130   2                      if(COMx->UART_RxEnable == ENABLE)       S2CON |=  (1<<4);       //允许接收
 131   2                      else                                                            S2CON &= ~(1<<4);       //禁止接收
 132   2                      P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);        //切换IO
 133   2                      return  0;
 134   2              }
 135   1      #endif
 136   1      #ifdef UART3
                      if(UARTx == UART3)
                      {
                              COM3.id = 3;
                              COM3.TX_read    = 0;
                              COM3.TX_write   = 0;
                              COM3.B_TX_busy  = 0;
                              COM3.RX_Cnt     = 0;
                              COM3.RX_TimeOut = 0;
                              COM3.B_RX_OK    = 0;
                              for(i=0; i<COM_TX3_Lenth; i++)  TX3_Buffer[i] = 0;
                              for(i=0; i<COM_RX3_Lenth; i++)  RX3_Buffer[i] = 0;
              
                              if((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx))  //可变波特率
                              {
                                      if(COMx->UART_Priority > Priority_3)    return 2;       //错误
                                      UART3_Priority(COMx->UART_Priority);    //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority
             -_3
                                      if(COMx->UART_Mode == UART_9bit_BRTx)   S3_9bit();      //9bit
                                      else                                                                    S3_8bit();      //8bit
                                      j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
                                      if(j >= 65536UL)        return 2;       //错误
                                      j = 65536UL - j;
                                      if(COMx->UART_BRT_Use == BRT_Timer3)
                                      {
                                              S3_BRT_UseTimer3();             //S3 BRT Use Timer3;
                                              TH3 = (u8)(j>>8);
                                              TL3 = (u8)j;
                                              T4T3M &= 0xf0;
                                              T4T3M |= 0x0a;                  //Timer3 set As Timer, 1T mode, Start timer3
                                      }
                                      else if(COMx->UART_BRT_Use == BRT_Timer2)
                                      {
                                              AUXR &= ~(1<<4);                //Timer stop
                                              S3_BRT_UseTimer2();     //S3 BRT Use Timer2;
                                              AUXR &= ~(1<<3);                //Timer2 set As Timer
                                              AUXR |=  (1<<2);                //Timer2 set as 1T mode
                                              TH2 = (u8)(j>>8);
                                              TL2 = (u8)j;
                                              IE2  &= ~(1<<2);        //禁止中断
C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 4   

                                              AUXR |=  (1<<4);        //Timer run enable
                                      }
                                      else return 2;  //错误
                              }
                              else    return 2;       //模式错误
                              if(COMx->UART_Interrupt == ENABLE)      S3_Int_Enable();                //允许中断
                              else                                                            S3_Int_Disable();               //禁止中断
                              if(COMx->UART_RxEnable == ENABLE)       S3_RX_Enable(); //允许接收
                              else                                                            S3_RX_Disable();        //禁止接收
                              P_SW2 = (P_SW2 & ~2) | (COMx->UART_P_SW & 0x02);        //切换IO
                              return  0;
                      }
              #endif
 188   1      #ifdef UART4
                      if(UARTx == UART4)
                      {
                              COM4.id = 3;
                              COM4.TX_read    = 0;
                              COM4.TX_write   = 0;
                              COM4.B_TX_busy  = 0;
                              COM4.RX_Cnt     = 0;
                              COM4.RX_TimeOut = 0;
                              COM4.B_RX_OK    = 0;
                              for(i=0; i<COM_TX4_Lenth; i++)  TX4_Buffer[i] = 0;
                              for(i=0; i<COM_RX4_Lenth; i++)  RX4_Buffer[i] = 0;
              
                              if((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx))  //可变波特率
                              {
                                      if(COMx->UART_Priority > Priority_3)    return 2;       //错误
                                      UART4_Priority(COMx->UART_Priority);    //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority
             -_3
                                      if(COMx->UART_Mode == UART_9bit_BRTx)   S4_9bit();      //9bit
                                      else                                                                    S4_8bit();      //8bit
                                      j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;      //按1T计算
                                      if(j >= 65536UL)        return 2;       //错误
                                      j = 65536UL - j;
                                      if(COMx->UART_BRT_Use == BRT_Timer4)
                                      {
                                              S4_BRT_UseTimer4();             //S4 BRT Use Timer4;
                                              TH4 = (u8)(j>>8);
                                              TL4 = (u8)j;
                                              T4T3M &= 0x0f;
                                              T4T3M |= 0xa0;                  //Timer4 set As Timer, 1T mode, Start timer4
                                      }
                                      else if(COMx->UART_BRT_Use == BRT_Timer2)
                                      {
                                              AUXR &= ~(1<<4);                //Timer stop
                                              S4_BRT_UseTimer2();     //S4 BRT Use Timer2;
                                              AUXR &= ~(1<<3);                //Timer2 set As Timer
                                              AUXR |=  (1<<2);                //Timer2 set as 1T mode
                                              TH2 = (u8)(j>>8);
                                              TL2 = (u8)j;
                                              IE2  &= ~(1<<2);        //禁止中断
                                              AUXR |=  (1<<4);        //Timer run enable
                                      }
                                      else return 2;  //错误
                              }
                              else    return 2;       //模式错误
                              if(COMx->UART_Interrupt == ENABLE)      S4_Int_Enable();                //允许中断
                              else                                                            S4_Int_Disable();               //禁止中断
                              if(COMx->UART_RxEnable == ENABLE)       S4_RX_Enable(); //允许接收
                              else                                                            S4_RX_Disable();        //禁止接收
C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 5   

                              P_SW2 = (P_SW2 & ~4) | (COMx->UART_P_SW & 0x04);        //切换IO
                              return  0;
                      }
              #endif
 240   1              return  2;      //错误
 241   1      }
 242          
 243          /*********************************************************/
 244          
 245          /********************* UART1 函数 ************************/
 246          #ifdef UART1
 247          void TX1_write2buff(u8 dat)     //写入发送缓冲，指针+1
 248          {
 249   1              TX1_Buffer[COM1.TX_write] = dat;        //装发送缓冲
 250   1              if(++COM1.TX_write >= COM_TX1_Lenth)    COM1.TX_write = 0;
 251   1      
 252   1              if(COM1.B_TX_busy == 0)         //空闲
 253   1              {  
 254   2                      COM1.B_TX_busy = 1;             //标志忙
 255   2                      TI = 1;                                 //触发发送中断
 256   2              }
 257   1      }
 258          
 259          
 260          void TX1_Tab(u8 *tab,u8 num)
 261          {
 262   1              u8 i;
 263   1              for(i=0;i<num;i++)
 264   1              {
 265   2                      TX1_write2buff(tab[i]);
 266   2              }
 267   1      }
 268          
 269          
 270          
 271          void PrintString1(u8 *puts)
 272          {
 273   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);         //遇到停止符0结束
 274   1      }
 275          
 276          void UART1_int (void) interrupt UART1_VECTOR
 277          {
 278   1              if(RI)
 279   1              {
 280   2                      RI = 0;    //清除接收标志
 281   2                      if(COM1.B_RX_OK == 0)   //未完成接收
 282   2                      {
 283   3                              if(COM1.RX_Cnt >= COM_RX1_Lenth)
 284   3                                      COM1.RX_Cnt = 0;
 285   3                              
 286   3                              RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 287   3                              COM1.RX_TimeOut = TimeOutSet1;
 288   3                      }
 289   2              }
 290   1      
 291   1              if(TI)
 292   1              {
 293   2                      TI = 0;
 294   2                      if(COM1.TX_read != COM1.TX_write)
 295   2                      {
 296   3                              SBUF = TX1_Buffer[COM1.TX_read];
 297   3                              if(++COM1.TX_read >= COM_TX1_Lenth)             COM1.TX_read = 0;
C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 6   

 298   3                      }
 299   2                      else    COM1.B_TX_busy = 0;
 300   2              }
 301   1      }
 302          #endif
 303          
 304          /********************* UART2 函数 ************************/
 305          #ifdef UART2
 306          void TX2_write2buff(u8 dat)     //写入发送缓冲，指针+1
 307          {
 308   1              TX2_Buffer[COM2.TX_write] = dat;        //装发送缓冲
 309   1              if(++COM2.TX_write >= COM_TX2_Lenth)    COM2.TX_write = 0;
 310   1      
 311   1              if(COM2.B_TX_busy == 0)         //空闲
 312   1              {  
 313   2                      COM2.B_TX_busy = 1;             //标志忙
 314   2                      SET_TI2();                              //触发发送中断
 315   2              }
 316   1      }
 317          
 318          
 319          void TX2_Tab(u8 *tab,u8 num)
 320          {
 321   1              u8 i;
 322   1      //      CTR = 1;
 323   1      //      delay_ms(25);
 324   1              for(i=0;i<num;i++)
 325   1              {
 326   2                      TX2_write2buff(tab[i]);
 327   2              }
 328   1      //      delay_ms(25);
 329   1      //      CTR = 0;
 330   1      }
 331          
 332          
 333          
 334          void PrintString2(u8 *puts)
 335          {
 336   1      //      CTR = 1;
 337   1      //      delay_ms(25);
 338   1              for (; *puts != 0;      puts++)  TX2_write2buff(*puts);         //遇到停止符0结束
 339   1      //      delay_ms(25);
 340   1      //      CTR = 0;
 341   1      }
 342          
 343          void UART2_int (void) interrupt UART2_VECTOR
 344          {
 345   1              if(RI2)
 346   1              {
 347   2                      CLR_RI2();
 348   2                      if(COM2.B_RX_OK == 0)
 349   2                      {
 350   3                              if(COM2.RX_Cnt >= COM_RX2_Lenth)
 351   3                                      COM2.RX_Cnt = 0;
 352   3                              
 353   3                              RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 354   3                              COM2.RX_TimeOut = TimeOutSet2;
 355   3                      }
 356   2              }
 357   1      
 358   1              if(TI2)
 359   1              {
C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 7   

 360   2                      CLR_TI2();
 361   2                      if(COM2.TX_read != COM2.TX_write)
 362   2                      {
 363   3                              S2BUF = TX2_Buffer[COM2.TX_read];
 364   3                              if(++COM2.TX_read >= COM_TX2_Lenth)             COM2.TX_read = 0;
 365   3                      }
 366   2                      else    COM2.B_TX_busy = 0;
 367   2              }
 368   1      }
 369          #endif
 370          
 371          /********************* UART3 函数 ************************/
 372          #ifdef UART3
              void TX3_write2buff(u8 dat)     //写入发送缓冲，指针+1
              {
                      TX3_Buffer[COM3.TX_write] = dat;        //装发送缓冲
                      if(++COM3.TX_write >= COM_TX3_Lenth)    COM3.TX_write = 0;
              
                      if(COM3.B_TX_busy == 0)         //空闲
                      {  
                              COM3.B_TX_busy = 1;             //标志忙
                              SET_TI3();                              //触发发送中断
                      }
              }
              
              void PrintString3(u8 *puts)
              {
                  for (; *puts != 0;  puts++)  TX3_write2buff(*puts);         //遇到停止符0结束
              }
              
              void UART3_int (void) interrupt UART3_VECTOR
              {
                      if(RI3)
                      {
                              CLR_RI3();
                              if(COM3.B_RX_OK == 0)
                              {
                                      if(COM3.RX_Cnt >= COM_RX3_Lenth)        COM3.RX_Cnt = 0;
                                      RX3_Buffer[COM3.RX_Cnt++] = S3BUF;
                                      COM3.RX_TimeOut = TimeOutSet3;
                              }
                      }
              
                      if(TI3)
                      {
                              CLR_TI3();
                              if(COM3.TX_read != COM3.TX_write)
                              {
                                      S3BUF = TX3_Buffer[COM3.TX_read];
                                      if(++COM3.TX_read >= COM_TX3_Lenth)             COM3.TX_read = 0;
                              }
                              else    COM3.B_TX_busy = 0;
                      }
              }
              #endif
 415          
 416          /********************* UART4 函数 ************************/
 417          #ifdef UART4
              void TX4_write2buff(u8 dat)     //写入发送缓冲，指针+1
              {
                      TX4_Buffer[COM4.TX_write] = dat;        //装发送缓冲
                      if(++COM4.TX_write >= COM_TX4_Lenth)    COM4.TX_write = 0;
C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 8   

              
                      if(COM4.B_TX_busy == 0)         //空闲
                      {  
                              COM4.B_TX_busy = 1;             //标志忙
                              SET_TI4();                              //触发发送中断
                      }
              }
              
              void PrintString4(u8 *puts)
              {
                  for (; *puts != 0;  puts++)  TX4_write2buff(*puts);         //遇到停止符0结束
              }
              
              void UART4_int (void) interrupt UART4_VECTOR
              {
                      if(RI4)
                      {
                              CLR_RI4();
                              if(COM4.B_RX_OK == 0)
                              {
                                      if(COM4.RX_Cnt >= COM_RX4_Lenth)        COM4.RX_Cnt = 0;
                                      RX4_Buffer[COM4.RX_Cnt++] = S4BUF;
                                      COM4.RX_TimeOut = TimeOutSet4;
                              }
                      }
              
                      if(TI4)
                      {
                              CLR_TI4();
                              if(COM4.TX_read != COM4.TX_write)
                              {
                                      S4BUF = TX4_Buffer[COM4.TX_read];
                                      if(++COM4.TX_read >= COM_TX4_Lenth)             COM4.TX_read = 0;
                              }
                              else    COM4.B_TX_busy = 0;
                      }
              }
              #endif
 460          
 461          /*********************************************************/
 462          /*
 463          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
 464          {
 465                  if(COMx->id == 1)       TX1_write2buff(dat);
 466                  if(COMx->id == 2)       TX2_write2buff(dat);
 467                  if(COMx->id == 3)       TX3_write2buff(dat);
 468                  if(COMx->id == 4)       TX4_write2buff(dat);
 469          }
 470          
 471          void PrintString(COMx_Define *COMx, u8 *puts)
 472          {
 473              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
 474          }
 475          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1167    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    526      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.60.7.0   STC_UART                                                          04/10/2025 13:26:14 PAGE 9   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
